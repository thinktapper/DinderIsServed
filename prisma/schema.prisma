// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = env("RENDER_DB_URL")
  url      = env("LOCAL_DB_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  username  String   @unique
  password  String
  sessionID String?

  herds           HerdMembership[]
  organizedFeasts Feast[]          @relation(name: "organizer")
  votes           Vote[]           @relation(name: "votes")

  // @@unique([username, email])
  // @@index([username, email])
  // @@map(name: "users")
  invited HerdInvite[] @relation(name: "inviter")
}

model Herd {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(255)

  // shepherd   User   @relation(name: "shepHerds", fields: [shepherdId], references: [id], onDelete: Cascade)
  // shepherdId String
  members HerdMembership[]
  feasts  Feast[]
  invites HerdInvite[]
}

model HerdMembership {
  createdAt DateTime @default(now())
  role      UserRole

  herd   Herd   @relation(fields: [herdId], references: [id], onDelete: Cascade)
  herdId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@id([herdId, userId])
  @@index([userId, role])
}

model HerdInvite {
  createdAt   DateTime @default(now())
  inviteToken String?  @unique

  inviter       User   @relation(name: "inviter", fields: [inviterId], references: [id], onDelete: Cascade)
  inviterId     String
  invitedHerd   Herd   @relation(fields: [invitedHerdId], references: [id], onDelete: Cascade)
  invitedHerdId String

  inviteeEmail String?

  @@id([inviterId, invitedHerdId])
}

model Feast {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @db.VarChar(255)
  // start     String?  @db.VarChar(255)
  // end       String?  @db.VarChar(255)
  startDate DateTime? @default(now()) @db.Date
  endDate   DateTime? @db.Date
  closed    Boolean?  @default(false)
  location  Json      @db.Json
  radius    Int

  herd        Herd?   @relation(fields: [herdId], references: [id], onDelete: Cascade)
  herdId      String?
  organizer   User    @relation(name: "organizer", fields: [organizerId], references: [id])
  organizerId String

  places      Place[]
  voteResults Vote[]
  winner      Place?  @relation(name: "wonFeasts", fields: [winnerId], references: [id])
  winnerId    String?
}

model Place {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  googleId     String
  name         String   @db.VarChar(255)
  description  String?  @db.Text
  price        String?  @db.VarChar(255)
  rating       String?  @db.VarChar(255)
  ratingsTotal String?  @db.VarChar(255)
  stars        String?  @db.VarChar(255)
  photos       String[]

  feast     Feast   @relation(fields: [feastId], references: [id], onDelete: Cascade)
  feastId   String
  votes     Vote[]
  wonFeasts Feast[] @relation(name: "wonFeasts")

  // @@unique([feastId, googleId])
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  voteType  VoteType

  user    User   @relation(name: "votes", fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId String
  feast   Feast  @relation(fields: [feastId], references: [id], onDelete: Cascade)
  feastId String
}

enum UserRole {
  ADMIN
  USER
  MEMBER
  SHEPHERD
  ORGANIZER
}

enum VoteType {
  YASS
  NAH
}
